//********************
// WEB
//********************

// 1. Для чего нужен атрибут data ?
// 2. Что произойдет если absolute элементу поставить одновременно left и right, и/или top/bottom ?

// (https://codepen.io/paawel/pen/YzLPGOO)

// 3. Сколько колонок в гриде bootstrap ?
// 4. Какой метод протокола HTTP передает данные используя URL ?
// 5. Чем отличаются флаги --save и --save-dev
// 6. Чем animation отличается от transition ?
// 7. Выносит ли z-index элемент из потока ?
// 8. Что такое TDD ?
// 9. Из чего состоит URL ?
// 10. Что такое BOM ? Из чего состоит ?
// 11. Какие условные договоренности относительно именований существуют в JS ?
// 12. Что такое SOLID ?
// 13. Что такое npm ?

//********************
// JS
//********************

// 1. что возвращает функция если в ней не прописан return ?
// 2. как навесить обработчик на элемент стандартным способом? какие аргументы?
// 3. как отключить конкретный таймер если их несколько ?
// 4. какие функции называют чистыми ?
// 5. что в TS означает тип void ?
// 6. почему лучше использовать routerLink а не стандартный href в Angular ?
// 7. поля в декораторе @Component ?

//********************
// Primitive
//********************

typeof typeof undefined // ?

typeof null; // ?

"null" && {} && "undefined"; // ?

[] || null || parseInt('2.5'); // ?

!!(2-1); // ?


//********************
// Upper primitive
//********************

// На проекте с typeScript линтер выдал ошибку о том что свойство которые должно быть строкой
// не гарантированно является строкой (поле какогото объекта бех типов объекта).
// перепешите строку так, чтобы линтер провалидировал кода верно, используйте тернарный оператор
this.stringValue = dataObj.someValue;


// Какое значение нужно присвоить переменной, чтобы консоль вернул true
// let a = ; ???
console.log(a !== a)  //=> true


// есть объект, как сделать так, чтобы менять его свойство было запрещено
let testObj = {value: 1, key: true};
testObj.value = 2 // => не изменилось, осталось 1, // throws an error in strict mode
testObj.key = false // => не изменилось, осталось true, // throws an error in strict mode
